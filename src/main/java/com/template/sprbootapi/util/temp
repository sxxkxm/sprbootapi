/**
 *  Pointcut 이후에 실행되는 로그 출력 함수.
 *  Jackson으로 json 파싱해서 로그 출력.
 *  
 *  @param JoinPoint joinPoint
 *  @param Object returnObj
 *  @exception JsonProcessingException
 */
========================================================================================================================
// 삭제 start
System.out.println("################# ");
// 삭제 end
========================================================================================================================
Cookie[] cookieList = request.getCookies();

for(int i = 0; i < cookieList.length; i++) {
	if(cookieList[i].getName().equals("refresh-token")) {
		System.out.println("name : " + cookieList[i].getName() + ", value : " + cookieList[i].getValue() + ", domain : " + cookieList[i].getDomain() + ", path : " + cookieList[i].getPath());
	}
}
========================================================================================================================
/**
 * 	Refresh Token 재발행이 필요한지 판단하는 함수.
 *  유효기간이 절반이상 지났다면 재발급.
 *   
 *  @param String refreshToken
 *  @return boolean isReissueNeeded 
 *  @exception JWTVerificationException(유효기간 절반 지난 경우)
 */
@Override
public boolean isReissueNeeded(String refreshToken) {
	boolean isReissueNeeded = false;
	try {
		JWT.require(Algorithm.HMAC512(JwtProperties.SECRET))
		   .withSubject("refresh-token")
		   .acceptExpiresAt(JwtProperties.REFRESH_TOKEN_EXPIRATION_TIME/2)
		   .build()
		   .verify(refreshToken);
	} catch (JWTVerificationException e) {
		e.printStackTrace();
		isReissueNeeded = true;
	}
    return isReissueNeeded;
}
========================================================================================================================
// String jwtToken = jwtTokenProvider.createAccessToken(principalDetails.getAccountEntity().getId(), principalDetails.getAccountEntity().getEmail());
// HttpServletResponse response = new MockHttpServletResponse();
// response.addHeader(JwtProperties.HEADER_STRING, JwtProperties.TOKEN_PREFIX + refreshToken);
========================================================================================================================